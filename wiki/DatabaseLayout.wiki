Fixed the Views

{{{
CREATE TABLE `events` (
  `eventID` int(11) NOT NULL auto_increment,
  `name` varchar(40) NOT NULL,
  `date` datetime NOT NULL,
  `description` text NOT NULL,
  PRIMARY KEY  (`eventID`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=3 ;

-- --------------------------------------------------------

CREATE TABLE `purchases` (
  `eventID` int(11) NOT NULL,
  `userID` int(11) NOT NULL,
  `seatID` int(11) NOT NULL,
  `category` varchar(40) NOT NULL,
  `purchaseDate` datetime NOT NULL,
  `status` varchar(40) default NULL,
  PRIMARY KEY  (`eventID`,`seatID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

CREATE TABLE `pwd` (
  `userID` int(11) NOT NULL,
  `pwdHash` varchar(256) NOT NULL,
  `salt` varchar(128) NOT NULL,
  PRIMARY KEY  (`userID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

CREATE TABLE `seats` (
  `eventID` int(11) NOT NULL,
  `category` varchar(40) NOT NULL,
  `price` float NOT NULL,
  `amount` int(11) NOT NULL,
  PRIMARY KEY  (`eventID`,`category`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='category is premium or normal';

-- --------------------------------------------------------

CREATE TABLE `user` (
  `userID` int(11) NOT NULL auto_increment,
  `email` varchar(40) NOT NULL,
  `firstname` varchar(40) NOT NULL,
  `lastname` varchar(40) NOT NULL,
  `role` tinyint(4) NOT NULL,
  `lastlogin` datetime NOT NULL,
  PRIMARY KEY  (`userID`),
  UNIQUE KEY `email` (`email`)
) ENGINE=InnoDB;

-- --------------------------------------------------------

CREATE VIEW availableseats AS
SELECT eventID, category, name, date, price, amount,
 COUNT(purchases.seatID) AS sold,
 (amount - COUNT(purchases.seatID)) AS available
  FROM events NATURAL LEFT OUTER JOIN seats
  NATURAL LEFT OUTER JOIN purchases 
  GROUP BY eventID, category;

-- --------------------------------------------------------

-- View with statistics to each event and category

CREATE VIEW event_cat_stats AS
SELECT *,
 ((amount-sold)/amount*100) AS perc_unsold,
 ((sold)/amount*100) AS perc_sold,
 (price * sold) AS revenue
FROM `availableseats`;


-- --------------------------------------------------------


CREATE VIEW event_stats AS
SELECT
 eventID,
 name,
 date,
 SUM(amount) AS amount,
 SUM(sold) AS sold,
 SUM(available) AS available, 
 (SUM(available) / SUM(amount)*100) AS perc_unsold,
 (SUM(sold) / SUM(amount)*100) AS perc_sold,
 SUM(revenue) AS total_rev
FROM `event_cat_stats`
GROUP BY eventID;


}}}